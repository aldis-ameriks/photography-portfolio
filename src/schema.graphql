"""Add date formatting options."""
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int

  """Copy file to static directory and return public url to it"""
  publicURL: String

  """Returns all children nodes filtered by type Mdx"""
  childrenMdx: [Mdx]

  """
  Returns the first child node of type Mdx or null if there are no children of given type on this node
  """
  childMdx: Mdx

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

"""Node Interface"""
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
  contentFilePath: String
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  pathPrefix: String
  trailingSlash: String
  graphqlTypegen: SiteGraphqlTypegen
  polyfill: Boolean
  jsxRuntime: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteGraphqlTypegen {
  typesOutputPath: String
  documentSearchPaths: [String]
  generateOnBuild: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  siteUrl: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON
  pluginCreator: SitePlugin
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type SitePlugin implements Node {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Mdx implements Node {
  excerpt(pruneLength: Int = 140): String
  tableOfContents(maxDepth: Int): JSON
  body: String
  frontmatter: MdxFrontmatter
  fields: MdxFields
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type MdxFrontmatter {
  cover: File
  date(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  title: String
  areas: [String]
}

type MdxFields {
  slug: String
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

scalar GatsbyImageData

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, publicURL: StringQueryOperatorInput, childrenMdx: MdxFilterListInput, childMdx: MdxFilterInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: [FileSortInput], skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: [DirectorySortInput], skip: Int, limit: Int): DirectoryConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, pathPrefix: StringQueryOperatorInput, trailingSlash: StringQueryOperatorInput, graphqlTypegen: SiteGraphqlTypegenFilterInput, polyfill: BooleanQueryOperatorInput, jsxRuntime: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: [SiteSortInput], skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: [SiteFunctionSortInput], skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, pluginCreator: SitePluginFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: [SitePageSortInput], skip: Int, limit: Int): SitePageConnection!
  sitePlugin(resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, packageJson: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: [SitePluginSortInput], skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(buildTime: DateQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: [SiteBuildMetadataSortInput], skip: Int, limit: Int): SiteBuildMetadataConnection!
  mdx(excerpt: StringQueryOperatorInput, tableOfContents: JSONQueryOperatorInput, body: StringQueryOperatorInput, frontmatter: MdxFrontmatterFilterInput, fields: MdxFieldsFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Mdx
  allMdx(filter: MdxFilterInput, sort: [MdxSortInput], skip: Int, limit: Int): MdxConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: [ImageSharpSortInput], skip: Int, limit: Int): ImageSharpConnection!
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input MdxFilterListInput {
  elemMatch: MdxFilterInput
}

input MdxFilterInput {
  excerpt: StringQueryOperatorInput
  tableOfContents: JSONQueryOperatorInput
  body: StringQueryOperatorInput
  frontmatter: MdxFrontmatterFilterInput
  fields: MdxFieldsFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input MdxFrontmatterFilterInput {
  cover: FileFilterInput
  date: DateQueryOperatorInput
  title: StringQueryOperatorInput
  areas: StringQueryOperatorInput
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  publicURL: StringQueryOperatorInput
  childrenMdx: MdxFilterListInput
  childMdx: MdxFilterInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  ne: GatsbyImageData
  in: [GatsbyImageData]
  nin: [GatsbyImageData]
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input MdxFieldsFilterInput {
  slug: StringQueryOperatorInput
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldSelector!): [String!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  sum(field: FileFieldSelector!): Float
  group(skip: Int, limit: Int, field: FileFieldSelector!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input FileFieldSelector {
  sourceInstanceName: FieldSelectorEnum
  absolutePath: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  extension: FieldSelectorEnum
  size: FieldSelectorEnum
  prettySize: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  root: FieldSelectorEnum
  dir: FieldSelectorEnum
  base: FieldSelectorEnum
  ext: FieldSelectorEnum
  name: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  dev: FieldSelectorEnum
  mode: FieldSelectorEnum
  nlink: FieldSelectorEnum
  uid: FieldSelectorEnum
  gid: FieldSelectorEnum
  rdev: FieldSelectorEnum
  ino: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  atime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  ctime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  publicURL: FieldSelectorEnum
  childrenMdx: MdxFieldSelector
  childMdx: MdxFieldSelector
  childrenImageSharp: ImageSharpFieldSelector
  childImageSharp: ImageSharpFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

enum FieldSelectorEnum {
  SELECT
}

input MdxFieldSelector {
  excerpt: FieldSelectorEnum
  tableOfContents: FieldSelectorEnum
  body: FieldSelectorEnum
  frontmatter: MdxFrontmatterFieldSelector
  fields: MdxFieldsFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input MdxFrontmatterFieldSelector {
  cover: FileFieldSelector
  date: FieldSelectorEnum
  title: FieldSelectorEnum
  areas: FieldSelectorEnum
}

input MdxFieldsFieldSelector {
  slug: FieldSelectorEnum
}

input NodeFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
}

input ImageSharpFieldSelector {
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  original: ImageSharpOriginalFieldSelector
  resize: ImageSharpResizeFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ImageSharpFixedFieldSelector {
  base64: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  originalName: FieldSelectorEnum
}

input ImageSharpFluidFieldSelector {
  base64: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  sizes: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
}

input ImageSharpOriginalFieldSelector {
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
}

input ImageSharpResizeFieldSelector {
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  originalName: FieldSelectorEnum
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldSelector!): [String!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  sum(field: FileFieldSelector!): Float
  group(skip: Int, limit: Int, field: FileFieldSelector!): [FileGroupConnection!]!
  field: String!
  fieldValue: String
}

input FileSortInput {
  sourceInstanceName: SortOrderEnum
  absolutePath: SortOrderEnum
  relativePath: SortOrderEnum
  extension: SortOrderEnum
  size: SortOrderEnum
  prettySize: SortOrderEnum
  modifiedTime: SortOrderEnum
  accessTime: SortOrderEnum
  changeTime: SortOrderEnum
  birthTime: SortOrderEnum
  root: SortOrderEnum
  dir: SortOrderEnum
  base: SortOrderEnum
  ext: SortOrderEnum
  name: SortOrderEnum
  relativeDirectory: SortOrderEnum
  dev: SortOrderEnum
  mode: SortOrderEnum
  nlink: SortOrderEnum
  uid: SortOrderEnum
  gid: SortOrderEnum
  rdev: SortOrderEnum
  ino: SortOrderEnum
  atimeMs: SortOrderEnum
  mtimeMs: SortOrderEnum
  ctimeMs: SortOrderEnum
  atime: SortOrderEnum
  mtime: SortOrderEnum
  ctime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  publicURL: SortOrderEnum
  childrenMdx: MdxSortInput
  childMdx: MdxSortInput
  childrenImageSharp: ImageSharpSortInput
  childImageSharp: ImageSharpSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

enum SortOrderEnum {
  ASC
  DESC
}

input MdxSortInput {
  excerpt: SortOrderEnum
  tableOfContents: SortOrderEnum
  body: SortOrderEnum
  frontmatter: MdxFrontmatterSortInput
  fields: MdxFieldsSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input MdxFrontmatterSortInput {
  cover: FileSortInput
  date: SortOrderEnum
  title: SortOrderEnum
  areas: SortOrderEnum
}

input MdxFieldsSortInput {
  slug: SortOrderEnum
}

input NodeSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
  contentFilePath: SortOrderEnum
}

input ImageSharpSortInput {
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  original: ImageSharpOriginalSortInput
  resize: ImageSharpResizeSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ImageSharpFixedSortInput {
  base64: SortOrderEnum
  tracedSVG: SortOrderEnum
  aspectRatio: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcWebp: SortOrderEnum
  srcSetWebp: SortOrderEnum
  originalName: SortOrderEnum
}

input ImageSharpFluidSortInput {
  base64: SortOrderEnum
  tracedSVG: SortOrderEnum
  aspectRatio: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcWebp: SortOrderEnum
  srcSetWebp: SortOrderEnum
  sizes: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationWidth: SortOrderEnum
  presentationHeight: SortOrderEnum
}

input ImageSharpOriginalSortInput {
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
}

input ImageSharpResizeSortInput {
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  aspectRatio: SortOrderEnum
  originalName: SortOrderEnum
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldSelector!): [String!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  sum(field: DirectoryFieldSelector!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldSelector!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

input DirectoryFieldSelector {
  sourceInstanceName: FieldSelectorEnum
  absolutePath: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  extension: FieldSelectorEnum
  size: FieldSelectorEnum
  prettySize: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  root: FieldSelectorEnum
  dir: FieldSelectorEnum
  base: FieldSelectorEnum
  ext: FieldSelectorEnum
  name: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  dev: FieldSelectorEnum
  mode: FieldSelectorEnum
  nlink: FieldSelectorEnum
  uid: FieldSelectorEnum
  gid: FieldSelectorEnum
  rdev: FieldSelectorEnum
  ino: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  atime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  ctime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldSelector!): [String!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  sum(field: DirectoryFieldSelector!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldSelector!): [DirectoryGroupConnection!]!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  sourceInstanceName: SortOrderEnum
  absolutePath: SortOrderEnum
  relativePath: SortOrderEnum
  extension: SortOrderEnum
  size: SortOrderEnum
  prettySize: SortOrderEnum
  modifiedTime: SortOrderEnum
  accessTime: SortOrderEnum
  changeTime: SortOrderEnum
  birthTime: SortOrderEnum
  root: SortOrderEnum
  dir: SortOrderEnum
  base: SortOrderEnum
  ext: SortOrderEnum
  name: SortOrderEnum
  relativeDirectory: SortOrderEnum
  dev: SortOrderEnum
  mode: SortOrderEnum
  nlink: SortOrderEnum
  uid: SortOrderEnum
  gid: SortOrderEnum
  rdev: SortOrderEnum
  ino: SortOrderEnum
  atimeMs: SortOrderEnum
  mtimeMs: SortOrderEnum
  ctimeMs: SortOrderEnum
  atime: SortOrderEnum
  mtime: SortOrderEnum
  ctime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
}

input SiteGraphqlTypegenFilterInput {
  typesOutputPath: StringQueryOperatorInput
  documentSearchPaths: StringQueryOperatorInput
  generateOnBuild: BooleanQueryOperatorInput
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldSelector!): [String!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  sum(field: SiteFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFieldSelector!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  port: FieldSelectorEnum
  host: FieldSelectorEnum
  pathPrefix: FieldSelectorEnum
  trailingSlash: FieldSelectorEnum
  graphqlTypegen: SiteGraphqlTypegenFieldSelector
  polyfill: FieldSelectorEnum
  jsxRuntime: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input SiteSiteMetadataFieldSelector {
  title: FieldSelectorEnum
  description: FieldSelectorEnum
  siteUrl: FieldSelectorEnum
}

input SiteGraphqlTypegenFieldSelector {
  typesOutputPath: FieldSelectorEnum
  documentSearchPaths: FieldSelectorEnum
  generateOnBuild: FieldSelectorEnum
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldSelector!): [String!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  sum(field: SiteFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFieldSelector!): [SiteGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  trailingSlash: StringQueryOperatorInput
  graphqlTypegen: SiteGraphqlTypegenFilterInput
  polyfill: BooleanQueryOperatorInput
  jsxRuntime: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  buildTime: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  port: SortOrderEnum
  host: SortOrderEnum
  pathPrefix: SortOrderEnum
  trailingSlash: SortOrderEnum
  graphqlTypegen: SiteGraphqlTypegenSortInput
  polyfill: SortOrderEnum
  jsxRuntime: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SiteSiteMetadataSortInput {
  title: SortOrderEnum
  description: SortOrderEnum
  siteUrl: SortOrderEnum
}

input SiteGraphqlTypegenSortInput {
  typesOutputPath: SortOrderEnum
  documentSearchPaths: SortOrderEnum
  generateOnBuild: SortOrderEnum
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  sum(field: SiteFunctionFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldSelector!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

input SiteFunctionFieldSelector {
  functionRoute: FieldSelectorEnum
  pluginName: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
  absoluteCompiledFilePath: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  sum(field: SiteFunctionFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldSelector!): [SiteFunctionGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  functionRoute: SortOrderEnum
  pluginName: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
  absoluteCompiledFilePath: SortOrderEnum
  matchPath: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SitePluginFilterInput {
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldSelector!): [String!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  sum(field: SitePageFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePageFieldSelector!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

input SitePageFieldSelector {
  path: FieldSelectorEnum
  component: FieldSelectorEnum
  internalComponentName: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  pluginCreator: SitePluginFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input SitePluginFieldSelector {
  resolve: FieldSelectorEnum
  name: FieldSelectorEnum
  version: FieldSelectorEnum
  nodeAPIs: FieldSelectorEnum
  browserAPIs: FieldSelectorEnum
  ssrAPIs: FieldSelectorEnum
  pluginFilepath: FieldSelectorEnum
  pluginOptions: FieldSelectorEnum
  packageJson: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldSelector!): [String!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  sum(field: SitePageFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePageFieldSelector!): [SitePageGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SitePageSortInput {
  path: SortOrderEnum
  component: SortOrderEnum
  internalComponentName: SortOrderEnum
  componentChunkName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  pluginCreator: SitePluginSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SitePluginSortInput {
  resolve: SortOrderEnum
  name: SortOrderEnum
  version: SortOrderEnum
  nodeAPIs: SortOrderEnum
  browserAPIs: SortOrderEnum
  ssrAPIs: SortOrderEnum
  pluginFilepath: SortOrderEnum
  pluginOptions: SortOrderEnum
  packageJson: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldSelector!): [String!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  sum(field: SitePluginFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldSelector!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldSelector!): [String!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  sum(field: SitePluginFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldSelector!): [SitePluginGroupConnection!]!
  field: String!
  fieldValue: String
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  sum(field: SiteBuildMetadataFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldSelector!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  sum(field: SiteBuildMetadataFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldSelector!): [SiteBuildMetadataGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type MdxConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  distinct(field: MdxFieldSelector!): [String!]!
  max(field: MdxFieldSelector!): Float
  min(field: MdxFieldSelector!): Float
  sum(field: MdxFieldSelector!): Float
  group(skip: Int, limit: Int, field: MdxFieldSelector!): [MdxGroupConnection!]!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

type MdxGroupConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  distinct(field: MdxFieldSelector!): [String!]!
  max(field: MdxFieldSelector!): Float
  min(field: MdxFieldSelector!): Float
  sum(field: MdxFieldSelector!): Float
  group(skip: Int, limit: Int, field: MdxFieldSelector!): [MdxGroupConnection!]!
  field: String!
  fieldValue: String
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldSelector!): [String!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  sum(field: ImageSharpFieldSelector!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldSelector!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldSelector!): [String!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  sum(field: ImageSharpFieldSelector!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldSelector!): [ImageSharpGroupConnection!]!
  field: String!
  fieldValue: String
}